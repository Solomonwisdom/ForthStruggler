Girls and Boys
Time Limit: 20000/10000 MS (Java/Others)    Memory Limit: 65536/32768 K (Java/Others)
Total Submission(s): 9448    Accepted Submission(s): 4310


Problem Description
the second year of the university somebody started a study on the romantic relations between the students. The relation “romantically involved” is defined between one girl and one boy. For the study reasons it is necessary to find out the maximum set satisfying the condition: there are no two students in the set who have been “romantically involved”. The result of the program is the number of students in such a set.

The input contains several data sets in text format. Each data set represents one set of subjects of the study, with the following description:

the number of students
the description of each student, in the following format
student_identifier:(number_of_romantic_relations) student_identifier1 student_identifier2 student_identifier3 ...
or
student_identifier:(0)

The student_identifier is an integer number between 0 and n-1, for n subjects.
For each given data set, the program should write to standard output a line containing the result.
 

Sample Input
7
0: (3) 4 5 6
1: (2) 4 6
2: (0)
3: (0)
4: (2) 0 1
5: (1) 0
6: (2) 0 1
3
0: (2) 1 2
1: (1) 0
2: (1) 0
 

Sample Output
5
2


题目大意：找到一个集合，使得其中的所有人之间不能恋爱。
解题思路：先找到能够恋爱的人的关系，再分析题目。
这里给出实例说话：例如样例中2 
0 1 2
1 0
2 0
中，0和1可以恋爱，0和2也可以恋爱，但是1和2之间不能恋爱，则1 2之间组成的集合的元素的个数就是题中的解。那么我们就要研究如何把0去掉，去掉了他，我们就有了最大集合元素个数。这个时候就要用到匈牙利算法--二分图匹配。
我们可以通过二分匹配的算法求出能够恋爱的组数，因为这里是双向图，所以我们现在得到的组数实际是人数并不是组数，所以我们得到的数要除以2，所得到的数才是能够恋爱的最大组数，这个时候我们只需要拆散他们就行了。扔一个，留一个。去掉的人不加入集合，留下的人加入集合，就得到了题目所求的东西。
这里直接上AC完整代码：
[cpp] view plain copy
#include<stdio.h>  
#include<string.h>  
using namespace std;  
int map[501][501];//WA的原因也可能是数组开的不对。  
int vis[501];  
int match[501];  
int n;  
int  find(int x)  
{  
    for(int i=0;i<n;i++)  
    {  
        if(vis[i]==0&&map[x][i]==1)  
        {  
            vis[i]=1;  
            if(match[i]==-1||find(match[i]))  
            {  
                match[i]=x;  
                return 1;  
            }  
        }  
    }  
    return 0;  
}  
int main()  
{  
    while(~scanf("%d",&n))  
    {  
        memset(map,0,sizeof(map));  
        memset(match,-1,sizeof(match));  
        for(int i=0;i<n;i++)  
        {  
            int x,y,q;  
            scanf("%d: (%d)",&x,&q);  
            for(int j=0;j<q;j++)  
            {  
                scanf("%d",&y);  
                map[x][y]=1;  
            }  
        }  
        int output=0;  
        for(int i=0;i<n;i++)  
        {  
            memset(vis,0,sizeof(vis));  
            if(find(i))  
            output++;  
        }  
        printf("%d\n",n-output/2);  
    }  
}  
我了解到给指针分配内存空间在极短的时间内重复多次是十分消耗内存的。但就算只分配一次内存，依然过不了，我选择狗带。
#include <iostream>
#include <cstdio>
#include <cstring>
#include <string>
using namespace std;
int *(*couple),n,*vis,*match,res;
bool find(int x){
	for(int i=0;i<n;i++)
	{
		if(vis[i]==0&&couple[x][i]==1)
		{
			vis[i]=1;
			if(match[i]==-1||find(match[i])){
				match[i]=x;
				return true;
			}
		}
	}
	return false;
}
int main(char argc,char *argv[])
{
	int t,i,j,x;
	while(scanf("%d",&n)!=EOF){
		couple=new int*[n];
		vis=new int[n];
		match=new int[n];
		res=0;
		for(i=0;i<n;i++){
			vis[i]=0;
			match[i]=-1;
			*(couple+i)=new int[n];
		}
		for(i=0;i<n;i++)
			for(j=0;j<n;j++)
				*(*(couple+i)+j)=0;
		for(i=0;i<n;i++){
			scanf("%d: (%d)",&j,&t);
			for(j=0;j<t;j++){
				scanf("%d",&x);
				couple[i][x]=1;
			}
		}
		for(i=0;i<n;i++){
			for(j=0;j<n;j++) vis[i]=0;
			if(find(i)) res++;
		}
		delete couple;
		delete vis;
		delete match;
		printf("%d\n",n-res/2);
	}
	return 0;
}